import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

#import data
url = "http://bit.ly/w-data"
data = pd.read_csv(url)
print("Data imported successfully")
print(data.head(15))

#a look into data
data.info()
data.describe()

#plotting data
data.plot(x='Hours', y='Scores', style='o')
plt.title("Hours vs Scores", fontsize=15, fontweight="bold")
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()

#plotting regression graph
sns.regplot(x=data["Hours"], y=data["Scores"], data=data, scatter_kws={'color': "c"}, line_kws={'color': "b"})
plt.xlabel("Hours")
plt.ylabel("Score")
plt.title("Hours vs Scores", fontsize=15, fontweight="bold")
plt.show()

#training model
#splitting data
X = data.iloc[:, :-1].values
y = data.iloc[:, 1].values
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

#fitting data in model
regression = LinearRegression()
regression.fit(X_train, y_train)
print("Training complete.")

line = regression.coef_ * X + regression.intercept_



print(X_test)  # Testing data - In Hours
y_pred = regression.predict(X_test)  # Predicting the scores
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(df)


#calculating mean absolute error
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))

#question
hours = [9.25]
own_pred = regression.predict([hours])
print("No of Hours = {}".format([hours]))
print("Predicted Score = {}".format(own_pred[0]))
